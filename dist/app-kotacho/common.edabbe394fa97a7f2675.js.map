{"version":3,"sources":["./src/app/_shared/mat-confirm-dialog/mat-confirm-dialog.component.ts","./src/app/_shared/mat-confirm-dialog/mat-confirm-dialog.component.html","./src/app/_shared/dialog.service.ts","./src/app/cliente/cliente.service.ts","./src/app/_shared/dialogo-confirmacao/dialogo-confirmacao.component.ts","./src/app/_shared/dialogo-confirmacao/dialogo-confirmacao.component.html","./src/app/produto/produto.service.ts","./src/app/pedido/pedido.service.ts","./src/app/categoria/categoria.service.ts"],"names":[],"mappings":"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","file":"common.edabbe394fa97a7f2675.js","sourcesContent":["import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-mat-confirm-dialog',\r\n  templateUrl: './mat-confirm-dialog.component.html',\r\n  styleUrls: ['./mat-confirm-dialog.component.css']\r\n})\r\nexport class MatConfirmDialogComponent implements OnInit {\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data,\r\n    public dialogRef: MatDialogRef<MatConfirmDialogComponent>) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close(false);\r\n  }\r\n\r\n}\r\n","<div>\r\n  <div class=\"content-container\">\r\n    <!-- <mat-icon id=\"close-icon\" (click)=\"closeDialog()\">close</mat-icon> -->\r\n    <span class=\"content-span full-width\">{{data.message}}</span>\r\n  </div>\r\n  <button mat-flat-button id=\"yes-button\" mat-dialog-close=true>Sim</button>\r\n  <button mat-flat-button id=\"no-button\" mat-dialog-close=false>Não</button>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatConfirmDialogComponent } from './mat-confirm-dialog/mat-confirm-dialog.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DialogService {\r\n\r\n  constructor(private dialog: MatDialog) { }\r\n\r\n  openConfirmDialog(msg){\r\n   const result = this.dialog.open(MatConfirmDialogComponent,{\r\n      width: '390px',\r\n      panelClass: 'confirm-dialog-container',\r\n      disableClose: true,\r\n      position: { top: \"10px\" },\r\n      data :{\r\n        message : msg\r\n      }\r\n    });\r\n    console.log('O RETORNO DE RESUILT '+result);\r\n    debugger;\r\n    return result;\r\n  }\r\n}\r\n","\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, EMPTY } from \"rxjs\";\nimport { catchError, map } from 'rxjs/operators';\nimport { Cliente } from './cliente.model';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { environment } from 'src/environments/environment';\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ClienteService {\n    private baseURL = environment.api.appBackend;\n\n    private endpoint = 'clientes'\n\n    constructor(private snackBar: MatSnackBar,\n        private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Cliente>> {\n\n        return this.httpClient\n            .get<Cliente[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Cliente>>Page.fromResponse(response))\n            );\n\n    }\n\n    download(): Observable<any> {\n        const urlGet = `${this.baseURL}/${this.endpoint}/download`;\n\n        return this.httpClient.get(urlGet, { responseType: 'blob' });\n    }\n\n\n    cadastrar(Cliente: Cliente): Observable<Cliente> {\n        return this.httpClient.post<Cliente>(`${this.baseURL}/${this.endpoint}`, Cliente);\n    }\n\n    pesquisarPorId(id: string): Observable<Cliente> {\n        return this.httpClient.get<Cliente>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n\n    atualizar(cliente: Cliente): Observable<Cliente> {\n        return this.httpClient.put<Cliente>(`${this.baseURL}/${this.endpoint}/${cliente.cli_id}`, cliente);\n    }\n\n    deletar(_id: number): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${_id}`);\n    }\n    getClientes(): Observable<Cliente[]> {\n        return this.httpClient.get<Cliente[]>(`${this.baseURL}/${this.endpoint}`).pipe(\n            map((obj) => obj),\n            catchError((e) => this.errorHandler(e))\n        );\n    }\n    showMessage(msg: string, isError: boolean = false): void {\n        this.snackBar.open(msg, \"X\", {\n            duration: 3000,\n            horizontalPosition: \"right\",\n            verticalPosition: \"top\",\n            panelClass: isError ? [\"msg-error\"] : [\"msg-success\"],\n        });\n    }\n    errorHandler(e: any): Observable<any> {\n        this.showMessage(\"Ocorreu um erro!\", true);\n        return EMPTY;\n    }\n\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dialogo-confirmacao',\r\n  templateUrl: './dialogo-confirmacao.component.html',\r\n  styleUrls: ['./dialogo-confirmacao.component.scss']\r\n})\r\nexport class DialogoConfirmacaoComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<h1 mat-dialog-title>Confirmação</h1>\r\n<div mat-dialog-content>\r\n    <p>Confirma a exclusão?</p>\r\n</div>\r\n<div mat-dialog-actions>\r\n    <button mat-button mat-dialog-close=\"false\">Cancelar</button>\r\n    <button mat-button mat-dialog-close=\"true\" cdkFocusInitial>Confirmar</button> \r\n</div>","\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable, EMPTY } from \"rxjs\";\nimport { catchError, map } from 'rxjs/operators';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { environment } from 'src/environments/environment';\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { Produto } from '../interfaces/produto.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProdutoService {\n    private baseURL = environment.api.appBackend;\n\n    private endpoint = 'produtos';\n\n\n    constructor(private snackBar: MatSnackBar,\n        private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Produto>> {\n\n        return this.httpClient\n            .get<Produto[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Produto>>Page.fromResponse(response))\n            );\n\n    }\n\n    cadastrar(produto: Produto): Observable<Produto> {\n        return this.httpClient.post<Produto>(`${this.baseURL}/${this.endpoint}`, produto);\n    }\n\n    pesquisarPorId(id: string): Observable<Produto> {\n        return this.httpClient.get<Produto>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n\n    atualizar(produto: Produto): Observable<Produto> {\n        const result = this.httpClient.post<Produto>(`${this.baseURL}/${this.endpoint}`, produto);\n        debugger;\n        return result;\n    }\n    \n    deletar(_id:string): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${_id}`);\n    }\n    uploadImage(file:any): Observable<any> {\n        return this.httpClient.post<any>(`${this.baseURL}/${this.endpoint}/upload`, file);\n    }\n    getProdutos(): Observable<Produto[]> {\n        return this.httpClient.get<Produto[]>(`${this.baseURL}/${this.endpoint}`).pipe(\n            map((obj) => obj),\n            catchError((e) => this.errorHandler(e))\n        );\n    }\n    showMessage(msg: string, isError: boolean = false): void {\n        this.snackBar.open(msg, \"X\", {\n            duration: 3000,\n            horizontalPosition: \"right\",\n            verticalPosition: \"top\",\n            panelClass: isError ? [\"msg-error\"] : [\"msg-success\"],\n        });\n    }\n    errorHandler(e: any): Observable<any> {\n        this.showMessage(\"Ocorreu um erro!\", true);\n        return EMPTY;\n    }\n}","\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Pedido } from './pedido.model';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { environment } from 'src/environments/environment';\nimport { Item } from '../model/item';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PedidoService {\n    private baseURL = environment.api.appBackend;\n\n    private subject = new Subject<Item[]>();\n    private itens = Array<Item>();\n    private endpoint = 'pedidos'\n\n    constructor(private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Pedido>> {\n\n        return this.httpClient\n            .get<Pedido[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Pedido>>Page.fromResponse(response))\n            );\n    }\n\n    cadastrar(Pedido: Pedido): Observable<Pedido> {\n        return this.httpClient.post<Pedido>(`${this.baseURL}/${this.endpoint}`, Pedido);\n    }\n\n    pesquisarPorId(id: string): Observable<Pedido> {\n        return this.httpClient.get<Pedido>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n\n    atualizar(pedido: Pedido): Observable<Pedido> {\n        return this.httpClient.put<Pedido>(`${this.baseURL}/${this.endpoint}/${pedido.id}`, pedido);\n    }\n\n    \n\n    addItem(item: Item) {\n        this.itens.push(item);\n        this.subject.next(this.itens);\n    }\n\n    removeItem(item) {\n        this.itens = this.itens.filter(elem => elem !== item);\n        this.subject.next(this.itens);\n    }\n\n    loadItens(id: string): Observable<Item[]> {\n        return this.subject;\n    }\n\n    OnDestroy() {\n        this.subject.unsubscribe();\n    }\n\n    itensIsEmpty(): boolean {\n        return this.itens.length === 0;\n    }\n\n    deletar(_id:string): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${_id}`);\n    }\n\n}\n\n","\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Categoria } from './categoria.model';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CategoriaService {\n    private baseURL = environment.api.appBackend;\n\n    private endpoint = 'categorias'\n\n    constructor(private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Categoria>> {\n        return this.httpClient\n            .get<Categoria[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Categoria>>Page.fromResponse(response))\n            );\n    }\n\n    list(): Observable<Categoria[]> {\n        return this.httpClient\n            .get<Categoria[]>(`${this.baseURL}/${this.endpoint}`);\n    }\n\n    cadastrar(categoria: Categoria): Observable<Categoria> {\n        return this.httpClient.post<Categoria>(`${this.baseURL}/${this.endpoint}`, categoria);\n    }\n\n    pesquisarPorId(id: string): Observable<Categoria> {\n        return this.httpClient.get<Categoria>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n\n    atualizar(categoria: Categoria): Observable<Categoria> {\n        const result = this.httpClient.post<Categoria>(`${this.baseURL}/${this.endpoint}`, categoria);\n         console.log(JSON.stringify(result));\n        return result;\n    }\n\n    deletar(_id:string): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${_id}`);\n    }\n}"],"sourceRoot":"webpack:///"}