{"version":3,"sources":["./src/app/cliente/cliente.service.ts","./src/app/produto/produto.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Cliente } from './cliente.model';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ClienteService {\n    private baseURL = environment.api.appBackend;\n\n    private endpoint = 'clientes'\n\n    constructor(private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Cliente>> {\n\n        return this.httpClient\n            .get<Cliente[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Cliente>>Page.fromResponse(response))\n            );\n\n    }\n\n    cadastrar(Cliente: Cliente): Observable<Cliente> {\n        return this.httpClient.post<Cliente>(`${this.baseURL}/${this.endpoint}`, Cliente);\n    }\n\n    pesquisarPorId(id: string): Observable<Cliente> {\n        return this.httpClient.get<Cliente>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n\n    atualizar(cliente: Cliente): Observable<Cliente> {\n        return this.httpClient.put<Cliente>(`${this.baseURL}/${this.endpoint}/${cliente.cli_id}`, cliente);\n    }\n\n    deletar(cliente: Cliente): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${cliente.cli_id}`);\n    }\n}","\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { Produto } from '../interfaces/produto.model';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProdutoService {\n    private baseURL = environment.api.appBackend;\n\n    private endpoint = 'produtos'\n\n    constructor(private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Produto>> {\n\n        return this.httpClient\n            .get<Produto[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Produto>>Page.fromResponse(response))\n            );\n\n    }\n\n    cadastrar(produto: Produto): Observable<Produto> {\n        return this.httpClient.post<Produto>(`${this.baseURL}/${this.endpoint}`, produto);\n    }\n\n    pesquisarPorId(id: string): Observable<Produto> {\n        return this.httpClient.get<Produto>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n\n    atualizar(produto: Produto): Observable<Produto> {\n        return this.httpClient.put<Produto>(`${this.baseURL}/${this.endpoint}/${produto.id}`, produto);\n    }\n\n    deletar(produto: Produto): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${produto.id}`);\n    }\n}"],"sourceRoot":"webpack:///"}