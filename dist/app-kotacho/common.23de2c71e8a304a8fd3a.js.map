{"version":3,"sources":["./src/app/categoria/categoria.service.ts","./src/app/cliente/cliente.service.ts","./src/app/pedido/pedido.service.ts","./src/app/produto/produto.service.ts"],"names":[],"mappings":"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","file":"common.23de2c71e8a304a8fd3a.js","sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Categoria } from './categoria.model';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CategoriaService {\n    private baseURL = environment.api.appBackend;\n\n    private endpoint = 'categorias'\n\n    constructor(private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Categoria>> {\n        return this.httpClient\n            .get<Categoria[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Categoria>>Page.fromResponse(response))\n            );\n    }\n\n    list(): Observable<Categoria[]> {\n        return this.httpClient\n            .get<Categoria[]>(`${this.baseURL}/${this.endpoint}`);\n    }\n\n    cadastrar(categoria: Categoria): Observable<Categoria> {\n        debugger;\n        return this.httpClient.post<Categoria>(`${this.baseURL}/${this.endpoint}`, categoria);\n    }\n\n    pesquisarPorId(id: string): Observable<Categoria> {\n        return this.httpClient.get<Categoria>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n\n    atualizar(categoria: Categoria): Observable<Categoria> {\n        return this.httpClient.put<Categoria>(`${this.baseURL}/${this.endpoint}/${categoria.id}`, categoria);\n    }\n\n    deletar(categoria: Categoria): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${categoria.id}`);\n    }\n}","\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, EMPTY } from \"rxjs\";\nimport { catchError, map } from 'rxjs/operators';\nimport { Cliente } from './cliente.model';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { environment } from 'src/environments/environment';\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ClienteService {\n    private baseURL = environment.api.appBackend;\n\n    private endpoint = 'clientes'\n\n    constructor(private snackBar: MatSnackBar,\n        private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Cliente>> {\n\n        return this.httpClient\n            .get<Cliente[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Cliente>>Page.fromResponse(response))\n            );\n\n    }\n\n    download(): Observable<any> {\n        const urlGet = `${this.baseURL}/${this.endpoint}/download`;\n\n        return this.httpClient.get(urlGet, { responseType: 'blob' });\n    }\n\n\n    cadastrar(Cliente: Cliente): Observable<Cliente> {\n        return this.httpClient.post<Cliente>(`${this.baseURL}/${this.endpoint}`, Cliente);\n    }\n\n    pesquisarPorId(id: string): Observable<Cliente> {\n        return this.httpClient.get<Cliente>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n\n    atualizar(cliente: Cliente): Observable<Cliente> {\n        return this.httpClient.put<Cliente>(`${this.baseURL}/${this.endpoint}/${cliente.cli_id}`, cliente);\n    }\n\n    deletar(cliente: Cliente): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${cliente.cli_id}`);\n    }\n    getClientes(): Observable<Cliente[]> {\n        return this.httpClient.get<Cliente[]>(`${this.baseURL}/${this.endpoint}`).pipe(\n            map((obj) => obj),\n            catchError((e) => this.errorHandler(e))\n        );\n    }\n    showMessage(msg: string, isError: boolean = false): void {\n        this.snackBar.open(msg, \"X\", {\n            duration: 3000,\n            horizontalPosition: \"right\",\n            verticalPosition: \"top\",\n            panelClass: isError ? [\"msg-error\"] : [\"msg-success\"],\n        });\n    }\n    errorHandler(e: any): Observable<any> {\n        this.showMessage(\"Ocorreu um erro!\", true);\n        return EMPTY;\n    }\n\n}","\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Pedido } from './pedido.model';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { environment } from 'src/environments/environment';\nimport { Item } from '../model/item';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PedidoService {\n    private baseURL = environment.api.appBackend;\n\n    private subject = new Subject<Item[]>();\n    private itens = Array<Item>();\n    private endpoint = 'pedidos'\n\n    constructor(private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Pedido>> {\n\n        return this.httpClient\n            .get<Pedido[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Pedido>>Page.fromResponse(response))\n            );\n    }\n\n    cadastrar(Pedido: Pedido): Observable<Pedido> {\n        return this.httpClient.post<Pedido>(`${this.baseURL}/${this.endpoint}`, Pedido);\n    }\n\n    pesquisarPorId(id: string): Observable<Pedido> {\n        return this.httpClient.get<Pedido>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n\n    atualizar(pedido: Pedido): Observable<Pedido> {\n        return this.httpClient.put<Pedido>(`${this.baseURL}/${this.endpoint}/${pedido.id}`, pedido);\n    }\n\n    deletar(pedido: Pedido): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${pedido.id}`);\n    }\n\n    addItem(item: Item) {\n        this.itens.push(item);\n        this.subject.next(this.itens);\n    }\n\n    removeItem(item) {\n        this.itens = this.itens.filter(elem => elem !== item);\n        this.subject.next(this.itens);\n    }\n\n    loadItens(id: string): Observable<Item[]> {\n        return this.subject;\n    }\n\n    OnDestroy() {\n        this.subject.unsubscribe();\n    }\n\n    itensIsEmpty(): boolean {\n        return this.itens.length === 0;\n    }\n\n\n\n}\n\n","\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, EMPTY } from \"rxjs\";\nimport { catchError, map } from 'rxjs/operators';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { environment } from 'src/environments/environment';\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { Produto } from '../interfaces/produto.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProdutoService {\n    private baseURL = environment.api.appBackend;\n\n    private endpoint = 'produtos'\n\n    constructor(private snackBar: MatSnackBar,\n        private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Produto>> {\n\n        return this.httpClient\n            .get<Produto[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Produto>>Page.fromResponse(response))\n            );\n\n    }\n\n    cadastrar(produto: Produto): Observable<Produto> {\n        return this.httpClient.post<Produto>(`${this.baseURL}/${this.endpoint}`, produto);\n    }\n\n    pesquisarPorId(id: string): Observable<Produto> {\n        return this.httpClient.get<Produto>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n\n    atualizar(produto: Produto): Observable<Produto> {\n        return this.httpClient.put<Produto>(`${this.baseURL}/${this.endpoint}/${produto.id}`, produto);\n    }\n\n    deletar(produto: Produto): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${produto.id}`);\n    }\n    uploadImage(file:any): Observable<any> {\n        return this.httpClient.post<any>(`${this.baseURL}/${this.endpoint}/upload`, file);\n    }\n    getProdutos(): Observable<Produto[]> {\n        return this.httpClient.get<Produto[]>(`${this.baseURL}/${this.endpoint}`).pipe(\n            map((obj) => obj),\n            catchError((e) => this.errorHandler(e))\n        );\n    }\n    showMessage(msg: string, isError: boolean = false): void {\n        this.snackBar.open(msg, \"X\", {\n            duration: 3000,\n            horizontalPosition: \"right\",\n            verticalPosition: \"top\",\n            panelClass: isError ? [\"msg-error\"] : [\"msg-success\"],\n        });\n    }\n    errorHandler(e: any): Observable<any> {\n        this.showMessage(\"Ocorreu um erro!\", true);\n        return EMPTY;\n    }\n}"],"sourceRoot":"webpack:///"}