{"version":3,"sources":["./src/app/cliente/cliente.service.ts","./src/app/_shared/confirm-dialog/confirm-dialog.component.ts","./src/app/_shared/confirm-dialog/confirm-dialog.component.html","./src/app/pedido/pedido.service.ts","./src/app/categoria/categoria.service.ts"],"names":[],"mappings":"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","file":"common.f89f8ba1e3de10ab6fee.js","sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, EMPTY } from \"rxjs\";\nimport { catchError, map } from 'rxjs/operators';\nimport { Cliente } from './cliente.model';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { environment } from 'src/environments/environment';\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ClienteService {\n    private baseURL = environment.api.apiUrl;\n\n    private endpoint = 'clientes'\n\n    constructor(private snackBar: MatSnackBar,\n        private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Cliente>> {\n\n        return this.httpClient\n            .get<Cliente[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Cliente>>Page.fromResponse(response))\n            );\n\n    }\n\n    download(): Observable<any> {\n        const urlGet = `${this.baseURL}/${this.endpoint}/download`;\n\n        return this.httpClient.get(urlGet, { responseType: 'blob' });\n    }\n\n\n    cadastrar(Cliente: Cliente): Observable<Cliente> {\n        return this.httpClient.post<Cliente>(`${this.baseURL}/${this.endpoint}`, Cliente);\n    }\n\n    pesquisarPorId(id: string): Observable<Cliente> {\n        return this.httpClient.get<Cliente>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n\n    atualizar(cliente: Cliente): Observable<Cliente> {\n        return this.httpClient.put<Cliente>(`${this.baseURL}/${this.endpoint}/${cliente.id}`, cliente);\n    }\n\n    deletar(_id: string): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${_id}`);\n    }\n    getClientes(): Observable<Cliente[]> {\n        return this.httpClient.get<Cliente[]>(`${this.baseURL}/${this.endpoint}`).pipe(\n            map((obj) => obj),\n            catchError((e) => this.errorHandler(e))\n        );\n    }\n    showMessage(msg: string, isError: boolean = false): void {\n        this.snackBar.open(msg, \"X\", {\n            duration: 3000,\n            horizontalPosition: \"right\",\n            verticalPosition: \"top\",\n            panelClass: isError ? [\"msg-error\"] : [\"msg-success\"],\n        });\n    }\n    errorHandler(e: any): Observable<any> {\n        this.showMessage(\"Ocorreu um erro!\", true);\n        return EMPTY;\n    }\n\n}","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.css']\n})\nexport class ConfirmDialogComponent implements OnInit {\n  title: string;\n  message: string;\n\n  constructor(public dialogRef: MatDialogRef<ConfirmDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmDialogModel) {\n    // Update view with given values\n    this.title = data.title;\n    this.message = data.message;\n  }\n\n  ngOnInit() {\n  }\n\n  onConfirm(): void {\n    // Close the dialog, return true\n    this.dialogRef.close(true);\n  }\n\n  onDismiss(): void {\n    // Close the dialog, return false\n    this.dialogRef.close(false);\n  }\n}\n\n/**\n * Class to represent confirm dialog model.\n *\n * It has been kept here to keep it as part of shared component.\n */\nexport class ConfirmDialogModel {\n\n  constructor(public title: string, public message: string) {\n  }\n}\n","<h1 mat-dialog-title>\n  {{title}}\n</h1>\n\n<div mat-dialog-content>\n  <p>{{message}}</p>\n</div>\n\n<div mat-dialog-actions>\n  <button mat-raised-button color=\"primary\" (click)=\"onConfirm()\">Sim</button>\n  <button mat-button (click)=\"onDismiss()\">Não</button>\n</div>","\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Pedido } from './pedido.model';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { environment } from 'src/environments/environment';\nimport { Item } from '../model/item';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PedidoService {\n    \n    private baseURL = environment.api.apiUrl;\n\n    private subject = new Subject<Item[]>();\n    private itens = Array<Item>();\n    private endpoint = 'pedidos'\n\n    constructor(private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Pedido>> {\n        return this.httpClient\n            .get<Pedido[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Pedido>>Page.fromResponse(response))\n            );\n    }\n\n    cadastrar(pedido: Pedido): Observable<Pedido> {\n        return this.httpClient.post<Pedido>(`${this.baseURL}/${this.endpoint}`, pedido);\n    }\n\n    pesquisarPorId(id: string): Observable<Pedido> {\n        return this.httpClient.get<Pedido>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n    pesquisarPorCod(cod: number): Observable<Pedido> {\n        return this.httpClient.get<Pedido>(`${this.baseURL}/${this.endpoint}/${cod}`);\n    }\n\n    atualizar(pedido: Pedido): Observable<Pedido> {\n        return this.httpClient.post<Pedido>(`${this.baseURL}/${this.endpoint}`, pedido);\n    }\n    deletar(_id:string): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${_id}`);\n    }\n\n    \n\n    addItem(item: Item) {\n        this.itens.push(item);\n        this.subject.next(this.itens);\n    }\n\n    removeItem(item) {\n        this.itens = this.itens.filter(elem => elem !== item);\n        this.subject.next(this.itens);\n    }\n\n    loadItens(id: string): Observable<Item[]> {\n        return this.subject;\n    }\n\n    OnDestroy() {\n        this.subject.unsubscribe();\n    }\n\n    itensIsEmpty(): boolean {\n        return this.itens.length === 0;\n    }\n\n    \n\n}\n\n","\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Categoria } from './categoria.model';\nimport { QueryBuilder, Page } from '../_util/Pagination';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CategoriaService {\n    private baseURL = environment.api.apiUrl;\n\n    private endpoint = 'categorias'\n\n    constructor(private httpClient: HttpClient) { }\n\n    listar(queryBuilder: QueryBuilder): Observable<Page<Categoria>> {\n        return this.httpClient\n            .get<Categoria[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\n            .pipe(\n                map(response => <Page<Categoria>>Page.fromResponse(response))\n            );\n    }\n\n    list(): Observable<Categoria[]> {\n        return this.httpClient\n            .get<Categoria[]>(`${this.baseURL}/${this.endpoint}`);\n    }\n\n    cadastrar(categoria: Categoria): Observable<Categoria> {\n        return this.httpClient.post<Categoria>(`${this.baseURL}/${this.endpoint}`, categoria);\n    }\n\n    pesquisarPorId(id: string): Observable<Categoria> {\n        return this.httpClient.get<Categoria>(`${this.baseURL}/${this.endpoint}/${id}`);\n    }\n\n    atualizar(categoria: Categoria): Observable<Categoria> {\n        const result = this.httpClient.post<Categoria>(`${this.baseURL}/${this.endpoint}`, categoria);\n         console.log(JSON.stringify(result));\n        return result;\n    }\n\n    deletar(_id:string): Observable<{}> {\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${_id}`);\n    }\n}"],"sourceRoot":"webpack:///"}