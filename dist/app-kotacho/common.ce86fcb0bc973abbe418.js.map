{"version":3,"sources":["./src/app/cliente/cliente.service.ts","./src/app/_shared/confirm-dialog/confirm-dialog.component.ts","./src/app/_shared/confirm-dialog/confirm-dialog.component.html","./src/app/categoria/categoria.service.ts"],"names":[],"mappings":"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","file":"common.ce86fcb0bc973abbe418.js","sourcesContent":["\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, EMPTY } from \"rxjs\";\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Cliente } from './cliente.model';\r\nimport { QueryBuilder, Page } from '../_util/Pagination';\r\nimport { environment } from 'src/environments/environment';\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ClienteService {\r\n    private baseURL = environment.api.apiUrl;\r\n\r\n    private endpoint = 'clientes'\r\n\r\n    constructor(private snackBar: MatSnackBar,\r\n        private httpClient: HttpClient) { }\r\n\r\n    listar(queryBuilder: QueryBuilder): Observable<Page<Cliente>> {\r\n\r\n        return this.httpClient\r\n            .get<Cliente[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\r\n            .pipe(\r\n                map(response => <Page<Cliente>>Page.fromResponse(response))\r\n            );\r\n\r\n    }\r\n\r\n    download(): Observable<any> {\r\n        const urlGet = `${this.baseURL}/${this.endpoint}/download`;\r\n\r\n        return this.httpClient.get(urlGet, { responseType: 'blob' });\r\n    }\r\n\r\n\r\n    cadastrar(Cliente: Cliente): Observable<Cliente> {\r\n        return this.httpClient.post<Cliente>(`${this.baseURL}/${this.endpoint}`, Cliente);\r\n    }\r\n\r\n    pesquisarPorId(id: string): Observable<Cliente> {\r\n        return this.httpClient.get<Cliente>(`${this.baseURL}/${this.endpoint}/${id}`);\r\n    }\r\n\r\n    atualizar(cliente: Cliente): Observable<Cliente> {\r\n        return this.httpClient.put<Cliente>(`${this.baseURL}/${this.endpoint}/${cliente.id}`, cliente);\r\n    }\r\n\r\n    deletar(_id: string): Observable<{}> {\r\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${_id}`);\r\n    }\r\n    getClientes(): Observable<Cliente[]> {\r\n        return this.httpClient.get<Cliente[]>(`${this.baseURL}/${this.endpoint}`).pipe(\r\n            map((obj) => obj),\r\n            catchError((e) => this.errorHandler(e))\r\n        );\r\n    }\r\n    showMessage(msg: string, isError: boolean = false): void {\r\n        this.snackBar.open(msg, \"X\", {\r\n            duration: 3000,\r\n            horizontalPosition: \"right\",\r\n            verticalPosition: \"top\",\r\n            panelClass: isError ? [\"msg-error\"] : [\"msg-success\"],\r\n        });\r\n    }\r\n    errorHandler(e: any): Observable<any> {\r\n        this.showMessage(\"Ocorreu um erro!\", true);\r\n        return EMPTY;\r\n    }\r\n\r\n}","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  styleUrls: ['./confirm-dialog.component.css']\r\n})\r\nexport class ConfirmDialogComponent implements OnInit {\r\n  title: string;\r\n  message: string;\r\n\r\n  constructor(public dialogRef: MatDialogRef<ConfirmDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmDialogModel) {\r\n    // Update view with given values\r\n    this.title = data.title;\r\n    this.message = data.message;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onConfirm(): void {\r\n    // Close the dialog, return true\r\n    this.dialogRef.close(true);\r\n  }\r\n\r\n  onDismiss(): void {\r\n    // Close the dialog, return false\r\n    this.dialogRef.close(false);\r\n  }\r\n}\r\n\r\n/**\r\n * Class to represent confirm dialog model.\r\n *\r\n * It has been kept here to keep it as part of shared component.\r\n */\r\nexport class ConfirmDialogModel {\r\n\r\n  constructor(public title: string, public message: string) {\r\n  }\r\n}\r\n","<h1 mat-dialog-title>\r\n  {{title}}\r\n</h1>\r\n\r\n<div mat-dialog-content>\r\n  <p>{{message}}</p>\r\n</div>\r\n\r\n<div mat-dialog-actions>\r\n  <button mat-raised-button color=\"primary\" (click)=\"onConfirm()\">Sim</button>\r\n  <button mat-button (click)=\"onDismiss()\">NÃ£o</button>\r\n</div>","\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Categoria } from './categoria.model';\r\nimport { QueryBuilder, Page } from '../_util/Pagination';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CategoriaService {\r\n    private baseURL = environment.api.apiUrl;\r\n\r\n    private endpoint = 'categorias'\r\n\r\n    constructor(private httpClient: HttpClient) { }\r\n\r\n    listar(queryBuilder: QueryBuilder): Observable<Page<Categoria>> {\r\n        return this.httpClient\r\n            .get<Categoria[]>(`${this.baseURL}/${this.endpoint}?${queryBuilder.buildQueryString()}`, { observe: 'response' })\r\n            .pipe(\r\n                map(response => <Page<Categoria>>Page.fromResponse(response))\r\n            );\r\n    }\r\n\r\n    list(): Observable<Categoria[]> {\r\n        return this.httpClient\r\n            .get<Categoria[]>(`${this.baseURL}/${this.endpoint}`);\r\n    }\r\n\r\n    cadastrar(categoria: Categoria): Observable<Categoria> {\r\n        return this.httpClient.post<Categoria>(`${this.baseURL}/${this.endpoint}`, categoria);\r\n    }\r\n\r\n    pesquisarPorId(id: string): Observable<Categoria> {\r\n        return this.httpClient.get<Categoria>(`${this.baseURL}/${this.endpoint}/${id}`);\r\n    }\r\n\r\n    atualizar(categoria: Categoria): Observable<Categoria> {\r\n        const result = this.httpClient.post<Categoria>(`${this.baseURL}/${this.endpoint}`, categoria);\r\n         console.log(JSON.stringify(result));\r\n        return result;\r\n    }\r\n\r\n    deletar(_id:string): Observable<{}> {\r\n        return this.httpClient.delete(`${this.baseURL}/${this.endpoint}/${_id}`);\r\n    }\r\n}"],"sourceRoot":"webpack:///"}